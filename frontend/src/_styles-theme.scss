@use 'sass:map';
@use '@angular/material' as mat;

@mixin color($theme) {
	// Get the color config from the theme.
	$color-config: mat.get-color-config($theme);
  
	// Get the primary color palette from the color-config.
	$primary-palette: map.get($color-config, 'primary');

	//Get the accent color palette from the color-config.
	$accent-palette: map.get($color-config, 'accent');

	//Get the warn color palette from the color-config.
	$warn-palette: map.get($color-config, 'warn');

    .mat-mdc-snack-bar-container {
		.mdc-snackbar__surface {
			background-color: mat.get-color-from-palette($accent-palette, 500) !important;
			.mdc-snackbar__label, .mdc-button__label {
				color: mat.get-color-from-palette(map.get($accent-palette, contrast), 500) !important;
			}
		}

		//Added with panelClass property
		&.error {
			.mdc-snackbar__surface {
				background-color: mat.get-color-from-palette($warn-palette, 500) !important;
				.mdc-snackbar__label, .mdc-button__label {
					color: mat.get-color-from-palette(map.get($warn-palette, contrast), 500) !important;
				}
			}
		}
	}
}

@mixin typography($theme) {
  // Get the typography config from the theme.
  $typography-config: mat.get-typography-config($theme);

  html {
    font-family: mat.font-family($typography-config);
  }
}

@mixin theme($theme) {
  $color-config: mat.get-color-config($theme);
  @if $color-config != null {
    @include color($theme);
  }

  $typography-config: mat.get-typography-config($theme);
  @if $typography-config != null {
    @include typography($theme);
  }
}